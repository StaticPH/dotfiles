##############################################################
#-------------------------------------------------------------
# Setup bash prompt
#-------------------------------------------------------------
##############################################################

# Try to load virtualenv wrapper for prompt
### From my observations, this seems to add about a second of overhead time.
### Additionally, there might be reason to use the wrapper corresponding to a particular Python installation.
### With those points in mind, it might be better to have this be part of envrc files instead.
#-------------------------------------------------------------
# if [ -v PY38 ]; then
	# source "$PY38/Scripts/virtualenvwrapper.sh"
# elif [ -v PY37 ]; then
	# source "$PY37/Scripts/virtualenvwrapper.sh"
# elif [ -v PY36 ]; then
	# source "$PY36/Scripts/virtualenvwrapper.sh"
# fi


function isInGitBranch(){
	git symbolic-ref --short HEAD >/dev/null 2>&1
}

function parse_git_branch() {
	git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}


# Main prompt setup
# Note that an update to a relevant shell variable can be forced into affect by calling setupPrompt after this script has been sourced once
#-------------------------------------------------------------
function setupPrompt(){
	# Common PS1 details
	#-------------------------------------------------------------
	### Both options for PS1 display:
	### The current user's name
	### The machine hostname (underlined and in bold if logged in over SSH)
	### The return status of the last command, if it was non-zero
	### The current directory
	### Whether the current user is root, indicated by the user's name (and sometimes hostname or command separator) turning red.
	###
	### Neither option for PS1 inherently includes anything indicating virtual environments, vcs status, or job information. This may change at some point.

	# 'Subtle' PS1 details
	#-------------------------------------------------------------
	### This prompt is more subtle (Read: less attention grabbing)
	### It also includes a timestamp (though its the time the line itself was originally displayed, rather than continually running an update command in the background until the user 'submits' the command)
	### This prompt only separates the command from the static information with a "$ "

	# Colorful PS1 details
	#-------------------------------------------------------------
	### This prompt is rather colorful and eye catching, though not blindingly so.
	### It lacks a timestamp or any kind.
	### This prompt puts the command on a second line, leaving it clearly separated from the rest of the prompt
	### If the current user is root, the second line starts with an uppercase omega (Ω), and with a lowercase lambda (λ) otherwise
	### If the current directory is part of a git repository, the current branch name will be appended to the first line

	# Behavior of promptSelection variable
	#-------------------------------------------------------------
	# promptSelection <  0  : Use 'subtle' PS1
	# promptSelection == 0  : Don't modify PS1
	# promptSelection >  0  : Use colorful 2-line PS1


	[ -n "$1" ] && \
		local promptSelection="$1" || \
		local promptSelection="1"


	### The shortcut variables for the formatting used by my prompt
	local RED='\[\033[0;31m\]'
	local LRED='\[\033[1;31m\]'
	local GREEN='\[\033[0;32m\]'
	local LGREEN='\[\033[1;32m\]'
	local YELLOW='\[\033[0;33m\]'
	local LPURPLE='\[\033[1;35m\]'
	local CYAN='\[\033[0;36m\]'
	local RST='\[\033[0m\]' # Reset formatting
	local BOLD='\[\033[1m\]'
	local UNDERLINE='\[\033[4m\]'
	# local ITALIC='\[\033[3m\]'
	# local NOUNDERLINE='\[\033[24m\]'
	# local STRIKE='\[\033[9m\]'
	# local BGCOL='\[\033[7m\]'
	# local FGCOL='\[\033[8m\]'

	# Display the username and hostname underlined and in bold when connected via SSH.
	if [[ "${SSH_TTY}" ]]; then
		local hostStyle="${BOLD}${UNDERLINE}"
	fi

	# Display the current branch when in a directory that is part of a git repository
	# 24-bit true color support is assumed. If your terminal emulator doesn't support it, get a better terminal emulator!
	local branchColor='\[\033[38;2;29;194;164m\]'  #currently hardcoded to an almost-teal blue-green color (29;194;164)
	local gitBranch="${branchColor}\$(parse_git_branch)"


	### The value of this parameter is expanded like PS1 and displayed by interactive
	### shells after reading a command and before the command is executed.
	### ex: PS0="$(fullWidthLineUnicode ─)"
	# PS0=''

	if [ $promptSelection -lt 0 ]; then
		[[ $EUID == 0 ]] && local usr="${RED}\u" || local usr="${GREEN}\u"
		[[ $EUID == 0 ]] && local sep="${LRED}@" || local sep="${LGREEN}@"
		[[ $EUID == 0 ]] && local host="${RED}${hostStyle}\H" || local host="${GREEN}${hostStyle}\H"
		local clock="\[\e[1;30;40m\]⟨\T ⟩${RST}"
		PS1='$(getexitcode)'"${clock}[${usr}${sep}${host}${RST}] \w\\$ "
	elif [ $promptSelection -gt 0 ]; then
		[[ $EUID == 0 ]] && local usr="${RED}\u" || local usr="${CYAN}\u"
		local delim="\$>"
		[[ $EUID == 0 ]] && local delimColor="${RED}" || local delimColor="${LPURPLE}"
		[[ $EUID == 0 ]] && local cmdMarker="${RED}Ω${RST} " || local cmdMarker="${LPURPLE}λ${RST} "
		local host="${GREEN}@${hostStyle}\H"
		local exval="${RST}\[\033[7;31m\]"'$(getexitcode)'"${RST}"
		local here="${YELLOW}\w"
		
		# FIXME: The git segment of the prompt doesnt start working until this file has been sourced a second time : FIXME
		isInGitBranch && local repo="  ${gitBranch}" || local repo=""
		
		PS1="${exval}${usr}${host} ${here} ${delimColor}${delim}${repo}"$'\n'"${delimColor}${cmdMarker}"
	else #[ $promptSelection -eq 0 ]
		true
	fi

	# Aapparently you can prepend PS1 with something to set the terminal window title in xterm-based terminal emulators.
	# see:   https://stackoverflow.com/questions/1687642/set-screen-title-from-shellscript
	#PS1="${PS1}"


	### The value of this variable is used as the prompt for the select command.
	### If this variable is not set, the select command prompts with ‘#? ’
	# PS3=''

	### When running scripts in debug mode (-x), give the name of the file,
	### followed by the current line number within it
	### NOTE:
	###	     The first character of the expanded value is replicated multiple times,
	###      as necessary, to indicate multiple levels of indirection. The default is ‘+ ’
	PS4='$0  line\: $LINENO     '
	export PS1 PS4
}
setupPrompt

# Whenever displaying the prompt, write the previous line to disk
# Always occurs BEFORE $PS1 is applied
# export PROMPT_COMMAND="history -a"

# Set the number of trailing directory components to show when expanding \w or \W in the prompt string
# export PROMPT_DIRTRIM=3

#unset -f parse_git_branch
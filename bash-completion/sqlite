
# Apparently gating the loading of completion behind a conditional prevents it from being loaded even if the condition is true.
# I suppose this kinda makes sense, considering that Bash isn't supposed to even look for completion specifications until it needs one, let alone load them?

#command -v sqlite &>/dev/null && complete -F _sqlite3 sqlite
#complete -F _sqlite3 sqlite

_sqlite3_pretender ()
{
	# Trick the completion function, _parse_help, by replacing the name of the function/command Bash is trying to complete.
	#
	# Note that bash completion always uses 3 arguments, $1 being the function/command being completed for,
	# and $3 being the word before the current word being completed on the command line.
	# As such, when completing the first argument the user is passing to the command,
	# the $3 as given to bash completion will still be the name written by the user, rather than the replaced value in $1.

	#printf '\ninitial args[3]="%s"\n' "$*"
	shift # Remove name of target function/command from argument list
	local foo=("$@") # Try to be a little more cautious about unquoted variables, even if its probably fine; use an array to "safely" expand
	set -- sqlite3 "${foo[@]}"
	#printf 'modified args[3]="%s"\n' "$*"
	#printf '[\033[32m%s\033[0m] ' "$@"; printf '\n'

    local cur prev words cword;
    _init_completion || return;
    local dbexts='@(sqlite?(3)|?(s?(3))db)';
    case $prev in
        -help | -version | -lookaside | -mmap | -newline | -nullvalue | -pagecache | -scratch | -separator | *.$dbexts)
            return
        ;;
        -init)
            _filedir;
            return
        ;;
        -cmd)
            compopt -o filenames;
            COMPREPLY=($(compgen -c -- "$cur"));
            return
        ;;
    esac;

	## While COMP_LINE and COMP_WORDS can be modified, doing so doesn't change the actual positional arguments $1, $2, and $3; not a usable solution.
	#	printf "\nCOMP_LINE(len ${#COMP_LINE})=" ; printf "[\033[32m%s\033[0m]\n" "${COMP_LINE}"
	#	printf 'COMP_WORDS[@]=' ; printf "[\033[33m%s\033[0m]\n" "${COMP_WORDS[@]}"
	#	printf '${COMP_WORDS[0]}="%s"\n' "${COMP_WORDS[0]}"
	#	COMP_LINE="${COMP_LINE/$1/sqlite3}"
	#	COMP_WORDS[0]='sqlite3'
	#	printf "NEW COMP_LINE(len ${#COMP_LINE})=" ; printf "[\033[32m%s\033[0m]\n" "${COMP_LINE}"
	#	printf 'NEW COMP_WORDS[@]=' ; printf "[\033[33m%s\033[0m]\n" "${COMP_WORDS[@]}"
	#	printf 'NEW ${COMP_WORDS[0]}="%s"\n' "${COMP_WORDS[0]}"

    [[ $cword -gt 2 && ${words[cword - 2]} == -@(lookaside|pagecache|scratch) ]] && return;
    if [[ $cur == -* ]]; then
        COMPREPLY=($(compgen -W '$(_parse_help "$1" -help)' -- "$cur"));
		# Perhaps a less safe or flexible, but still somewhat viable, approach would be to replace $1 with sqlite3 when passing it to _parse_help
        # COMPREPLY=($(compgen -W '$(_parse_help "${1/*/sqlite3}" -help)' -- "$cur"));
        return;
    fi;
    _filedir "$dbexts"
}
complete -F _sqlite3_pretender sqlite

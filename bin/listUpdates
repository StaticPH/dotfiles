#! /bin/bash

function _divider(){
	printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' "-"
}

function _section(){
	# Takes a single string argument
	# Calls _divider() once before and after printing it
	# Prints an additional newline before and afterwards
	echo
	_divider
	echo "$1"
	_divider
	echo
}

# I cant remember why I wanted this, but it works regardless
# function _fileHyperLink(){
	# if [ $# -ne 1 ]; then
		# echo "No file provided for hyperlink creation"
		# return
	# fi

	# local dest=;
	# if [[ $OSTYPE == 'msys' ]]; then
		# dest="$(cygpath.exe --mixed --absolute $1)"
	# elif [ $(seemsLikeWSL) ]; then
		# dest="$(/bin/wslpath -ma $1)"
	# else
		# dest="$(realpath $1)"
	# fi

	# echo "file://$dest"
# }

echo "TODO: apt"
# ?dpkg?
# ?brew?
# ?yum?
# ?yaourt?
if [ -n "$(type -t pacman)" ]; then
	_section "Pacman packages"
	env pacman -Q --upgrades
fi;

# ?npm?
# ?go?

if [ -n "$(type -t cargo)" ]; then
	_section "Cargo executable crates"
	printf 'Use "cargo install-update --all" to update all outdated executable crates.\n'
	printf 'Use "cargo install-update {PACKAGE NAME]" to update a specific executable crate.\n'
	printf 'Add the "--git" flag to also update git packages.\n'
	printf 'Use "cargo update" to update non-executable crates.\n'
	env cargo install-update --all --list
fi

if [ -n "$(type -t gem)" ]; then
	_section "Ruby gems"
	env gem update --explain #--conservative
fi

if [ -n "$(type -t pip)" ]; then
	_section "Pip packages"
	env pip list --outdated
fi

if [ -n "$(type -t pipx)" ]; then
	_section "Pipx packages"
	# Extracted from my own bash script, pipx-outdated
	while read -sr pyPkgName pyPkyVersion; do
		local pypi_latest="$(curl -sS https://pypi.org/simple/${pyPkgName}/ | grep -o '>.*</' | tail -n 1 | grep -o -E '[0-9]([0-9]|[-._])*[0-9]')"
		[ "$pyPkyVersion" != "$pypi_latest" ] && printf "%s\n\tCurrent: %s\tLatest: %s\n" "$pyPkgName" "$pyPkyVersion" "$pypi_latest"
	done < <( pipx list | grep -o 'package.*,' | tr -d ',' | cut -d ' ' -f 2- )
fi

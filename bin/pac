#! /bin/bash

# Honor the NO_COLOR environment variable
if [ ! -v NO_COLOR ]; then
	_RED_="\033[31m"
	# _YELLOW_="\033[33m"
	_OFF_="\033[0m"
else
	_RED_=
	# _YELLOW_=
	_OFF_=
fi

pacman(){
	if [ ! -v NO_COLOR ]; then
		command pacman --color=auto $@
	else
		command pacman --color=never $@
	fi
}

usage(){
cat <<EOF
FLAGS:
   --completions  : output bash completion for pac to stdout.
   -h|--help      : Display this help text.
   -p             : (SYNC AND REMOVAL ONLY; Not Yet Implemented) Only simulate the command, do not execute it.

SUBCOMMANDS (Valid package operations):
   help    : Display this help text.
   removal : remove|autoremove
   sync    : install|update|download|upgrade|downgrade|
             info|show|cleanup|list|search|refresh
   query   : check|package-changelog|search-installed|
             owner-of|who-owns|list-package-owned|
             list-orphans|list-outdated|list-installed|
             list-explicitly-installed|list-dependencies
   file    : provides-what
EOF
}

completion(){
cat <<EOF
complete -W "remove autoremove install update download upgrade downgrade info show cleanup list \
search refresh check package-changelog search-installed owner-of who-owns list-package-owned list-orphans \
list-outdated list-installed list-explicitly-installed list-dependencies provides-what \
help --completion" pac
EOF
}

	if [[ $# == 0 ]]; then
		usage
	else
		case "$1" in
			remove)
				shift
				pacman -R $*
				;;
			autoremove)
				shift
				pacman -R --recursive $@
				;;
			info | show)
				shift
				pacman -S --info --info $*
				;;
			download)
				shift
				pacman -S --downloadonly $*
				;;
			install | update) # treat both install and update as the same
				shift
				pacman -S $*
				;;
			upgrade)
				shift
				pacman -Sy --sysupgrade $@
				;;
			downgrade)
				shift
				pacman -S --sysupgrade --sysupgrade $@
				;;
			cleanup)
				shift
				pacman -S --clean $@
				;;
			list)
				shift
				pacman -S --list #$@
				;;
			search)
				shift
				pacman -S --search $*
				# TODO: change this to search separately for each distinct parameter group, collate the results, and remove duplicates
				# multiple parameters can be grouped into a single parameter by enclosing them in quotes,
				# and pacman will exhibit its default search behavior of searching for packages containing ALL of the strings within the quotes.
				# strings not within quotes are treated as separate search queries.
				;;
			refresh)
				shift
				pacman -Sy # refresh the local sync database
				;;
			check)
				shift
				if [ "$#" != 0 ];then
					pacman -Qkq "$@" | sed -Ee 's#(.*)( .*)#\1 is missing \2#'
				else
					# pacman -Qk |
					echo "TODO: support checking multiple specific packages at once"
					for pkg in $(pacman -Qqs); do
						# FIXME: I truly dont understand why this doesn't seem to work ( T.T)
						# TODO: REPLACE $(tput setaf 3) with __YELLOW__
						pacman -Qk "$pkg" | sed -E \
						-e 's#(warning: )(.+?)(:)(.+?)( \(No such file or directory\))# printf "%s%s%s%s" "$(tput setaf 3)\1$(tput sgr0)" "\2" " is missing" "\4"#e' \
						-e '/.*0 missing files$/!s/(.*total files, )(.*)/printf "%s%s" "\1" "$(tput setaf 3)\2$(tput sgr0)"/e'
					done
				fi
				;;
			package-changelog)
				shift
				pacman -Q --changelog $@
				;;
			search-installed)
				shift
				pacman -Q --search $*
				# TODO: See TODO on "search"
				;;
			owner-of | who-owns)
				# This functionality is also available through pkgfile.
				shift
				pacman -Q --owns $*
				# TODO: for windows users, consider OR-ing || pacman -Q --owns (...something that tries again with ".exe" appended to every argument)
				;;
			list-package-owned) 	#TODO: May deprecate completely, since -Fl seems to give the same results for installed packages
				shift
				pacman -Q --list $*
				# I don't fully understand the difference between -Ql and -Fl, because it _sounds_ like -Q --list only works when you have the package installed,
				# while -F --list works for all known packages (installed or not).
				;;
			list-explicitly-installed)
				shift
				pacman -Q --explicit $@
				;;
			list-dependencies)
				printf "Currently doesn't quite do what might be expected from the name.\n"
				shift
				pacman -Q --deps $@
				;;
			list-orphans)
				shift
				pacman -Q --deps -t $@
				;;
			list-outdated) #list-out-of-date |
				shift
				pacman -Sy # refresh the local sync database
				pacman -Q --upgrades $@ #  check for out-of-date packages on the local system
				;;
			list-installed)
				shift
				pacman -Q --search
				;;
			provides-what)
				shift
				pacman -F --list $@
				;;
			-h | --help | help)
				usage
				exit
				;;
			--completion)
				completion
				exit
				;;
			*)
				printf "${_RED_}Invalid operation \"$1\"${_OFF_}\n"
				usage
				exit 1
				;;
		esac
	fi

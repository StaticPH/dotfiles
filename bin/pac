#! /bin/bash

# Honor the NO_COLOR environment variable
if [ ! -v NO_COLOR ]; then
	_RED_="\033[31m"
	# _YELLOW_="\033[33m"
	_OFF_="\033[0m"
else
	_RED_=
	# _YELLOW_=
	_OFF_=
fi

pacman(){
	if [ ! -v NO_COLOR ]; then
		command pacman --color=auto $@
	else
		command pacman --color=never $@
	fi
}

PARTIAL_UPGRADE_DANGERS='https://wiki.archlinux.org/title/System_maintenance#Partial_upgrades_are_unsupported'

grantAbortChance(){
	local key
	tput setaf 3 # Ignore NO_COLOR for serious warning messages
	printf '%s\n' 'About to perform a potentially dangerous operation.' \
	'To abort now, press Ctrl+C or Ctrl+D now. Enter any other key to continue.' 1>&2 && read -s -r -b 1 key
}

usage(){
cat <<EOF
FLAGS:
   --completions  : output bash completion for pac to stdout.
   -h|--help      : Display this help text.
   -p             : (SYNC AND REMOVAL ONLY; Not Yet Implemented) Only simulate the command, do not execute it.

SUBCOMMANDS (Valid package operations):
   help    : Display this help text.
   removal : remove|autoremove
   sync    : install|update|download|upgrade|downgrade|
             info|show|cleanup|list|search|refresh
   query   : check|package-changelog|search-installed|
             owner-of|who-owns|list-package-owned|
             list-orphans|list-outdated|list-installed|
             list-explicitly-installed|list-dependencies|
             show-local
   file    : provides-what|find-providers|refresh-files
EOF
}

# TODO: More intelligent completion that suggests arguments available to this subcommand
# TODO: For commands using the -U and -S flags, add support for --ignore and --needed
# TODO: For commands using the -R, -U and -S flags, add support for --nodeps, --assume-installed, and --print
# TODO: For commands using the -F flag, add support for --regex
completion(){
cat <<EOF
complete -W "remove autoremove install update download upgrade downgrade info show cleanup list \
search refresh check package-changelog search-installed owner-of who-owns list-package-owned list-orphans \
list-outdated list-installed list-explicitly-installed list-dependencies show-local provides-what \
find-providers help --completions" pac
EOF
}

	if [[ $# == 0 ]]; then
		usage
	else
		operation="$1" # Facillitate TODO second-level help function that accepts the operation as a paremeter. i.e. `remove --help` calls `operationHelp "remove"`.
		case "$operation" in
			remove | uninstall)
				shift
				pacman -R $*
				;;
			autoremove)
				shift
				pacman -R --recursive $@
				;;
			info | show)
				shift
				pacman -S --info --info $*
				;;
			download)
				shift
				pacman -S --downloadonly $*
				;;
			install | update) # Treat both install and update as the same; although perhaps at least 'update' should specifically use '--needed'.
				shift
				pacman -S $*
				;;
			upgrade)
				shift
				pacman -Sy --sysupgrade $@
				;;
			downgrade)
				shift
				pacman -S --sysupgrade --sysupgrade $@
				;;
			cleanup)
				shift
				pacman -S --clean $@
				;;
			list)
				# TODO: Maybe this should require an additional argument or something, to prevent potential forever-long waits due to sheer package count...
				shift
				pacman -S --list #$@
				;;
			search)
				shift
				pacman -S --search $*
				# TODO: Change this to search separately for each distinct parameter group, collate the results, and remove duplicates.
				# Multiple parameters can be grouped into a single parameter by enclosing them in quotes,
				# and pacman will exhibit its default search behavior of searching for packages containing ALL of the strings within the quotes.
				# Strings not within quotes are treated as separate search queries.
				;;
			refresh|!refresh-files) # Match "refresh", but NOT "refresh-files".
				shift
				pacman -Sy $@ # Refresh the local sync database; download a fresh copy of the master package database.
				;;
			check)
				shift
				if [ "$#" != 0 ];then
					pacman -Qkq "$@" | sed -Ee 's#(.*)( .*)#\1 is missing \2#'
				else
					# pacman -Qk |
					echo "TODO: support checking multiple specific packages at once"
					for pkg in $(pacman -Qqs); do
						# FIXME: I truly dont understand why this doesn't seem to work ( T.T)
						# TODO: REPLACE $(tput setaf 3) with __YELLOW__
						pacman -Qk "$pkg" | sed -E \
						-e 's#(warning: )(.+?)(:)(.+?)( \(No such file or directory\))# printf "%s%s%s%s" "$(tput setaf 3)\1$(tput sgr0)" "\2" " is missing" "\4"#e' \
						-e '/.*0 missing files$/!s/(.*total files, )(.*)/printf "%s%s" "\1" "$(tput setaf 3)\2$(tput sgr0)"/e'
					done
				fi
				;;
			package-changelog)
				shift
				pacman -Q --changelog $@
				;;
			search-installed)
				shift
				pacman -Q --search $*
				# TODO: See TODO on "search".
				;;
			owner-of | who-owns)
				# This functionality is also available through pkgfile.
				shift
				pacman -Q --owns $*
				# TODO: for windows users, consider OR-ing || pacman -Q --owns (...something that tries again with ".exe" appended to every argument).
				;;
			list-package-owned) 	#TODO: May deprecate completely, since -Fl seems to give the same results for installed packages.
				shift
				pacman -Q --list $*
				# I don't fully understand the difference between -Ql and -Fl, because it _sounds_ like -Q --list only works when you have the package installed,
				# while -F --list works for all known packages (installed or not).
				;;
			list-explicitly-installed)
				shift
				pacman -Q --explicit $@
				;;
			list-dependencies)
				printf "Currently doesn't quite do what might be expected from the name.\n"
				shift
				pacman -Q --deps $@
				;;
			list-orphans)
				shift
				pacman -Q --deps -t $@
				;;
			list-outdated) #list-out-of-date |
				shift
				# Should probably favor use of the checkupdates script from pacman-contrib, as per https://wiki.archlinux.org/title/System_maintenance#Partial_upgrades_are_unsupported
				if command -v checkupdates &>/dev/null ; then
					checkupdates "${NO_COLOR:+--nocolor}" "$@"
				else
					tput setaf 1 # Ignore NO_COLOR for serious warning messages
					printf "%s\n" 'Warning: Arch does not support partial upgrades!' \
					'Please install pacman-contrib to provide a safer method of checking for updates without also running a system update.' \
					"See $PARTIAL_UPGRADE_DANGERS for details."
					grantAbortChance
					pacman -Sy # Refresh the local sync database.
					pacman -Q --upgrades $@ # Check for out-of-date packages on the local system.
				fi
				;;
			list-installed)
				shift
				pacman -Q --search
				;;
			show-local)
				shift
				pacman -Q --info --info $@
				;;
			provides-what)
				shift
				pacman -F --list $@ # Does not appear to be capable of finding SOME packages that don't show up with 'pacman -Q --search PKG_NAME', like pkgconf, but will for others, like dosfstools (at least from msys2).
				;;
			find-providers)
				# Find all packages IN THE SYNC DATABASE that provide the file(s) passed as arguments.
				# Each file argument will yield its own set of results, so the user can search for multiple files not provided by any single package.
				# Each package in the results will also list all files it provides that match the search term.
				shift
				pacman -F $@
				;;
			refresh-files)
				shift
				pacman -Fy $@ # Download fresh package databases from the server. This will update the list of files associated with each package in the databases.
				;;
			-h | --help | help)
				usage
				exit
				;;
			--completions)
				completion
				exit
				;;
			*)
				printf "${_RED_}Invalid operation \"$1\"${_OFF_}\n"
				usage
				exit 1
				;;
		esac
	fi

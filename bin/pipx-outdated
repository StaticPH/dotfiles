#! /bin/bash
## List outdated (application-like) packages installed using pipx
__PROGNAME__="${0##*/}"

allowUnstable=0
usage(){
	printf "%s\n" "Usage: $__PROGNAME__ [--unstable]" \
		"       $__PROGNAME__ [-h|--help]"
	printf '    %s\n' \
		'Check all packages installed with pipx for a newer version.' \
		'Without the --unstable flag, only version strings consisting exclusively of numbers and decimal points are considered.' \
		'This means that alpha/beta/dev/unstable/prerelease/etc package versions are ignored by default.' \
		'Note that use of the --unstable flag requires the availability of the command-line JSON processing tool, jq, on the PATH.'
}

if [ "x$1" != 'x' ];then
	case "$1" in
		-h|--help) usage; exit 0;;
		--unstable)
			if ! command -v jq >/dev/null 2>&1; then
				printf 'ERROR: Command not found: "jq".\nThe "%s" flag requires this tool be available on the PATH.\n' "$1"
				exit 1
			fi
			shift;
			allowUnstable=1;;
		*) printf 'ERROR: Unrecognized argument: "%s"\n' "$1"; exit 1;;
	esac
fi

_checkPkg(){
	curl -m 10 -Ss "https://pypi.org/simple/${1}/" | \
		sed -Ee 's@[^>]+>([^<]+)</.+@\1@' -e '/[-.]dev[0-9]*[-.]|[<>]/d' \
			-e 's/.+[-_]([0-9]([0-9]|[-._])*[0-9]).+/\1/' -e '/\./!d' | \
		tail -n 1
}
if [ "$allowUnstable" -eq 1 ]; then
	_checkPkg(){
		curl -m 10 -Ss "https://pypi.org/pypi/${1}/json" | jq --raw-output '.info.version'
	}
fi

_pipx_outdated(){
	let hasOutdated;

	if [ -t 1 ]; then
		## Standard output seems like a file descriptor opened on a terminal
		clearLine(){
			## Using standard xterm-ctrl sequences (which any modern terminal emulator should support most of at this point), clear the current line.

			## Move to character in column 1; normally equivalent to `tput hpa 0`.
			## Support for `tput cha <n>` seems less common, even when the terminal properly responds to the equivalent `\033[nG` sequence.
			printf '\033[1`'
			## Erase all text to the right of the cursor on the current line; normally equivalent to `tput el` for xterm-compatible terminals.
			printf '\033[0K'
		}
		displayTask(){
			clearLine
			printf 'Checking package: "%s"...\r' "$@"
		}
	else
		clearLine(){ :; }
		displayTask(){ :; }
	fi

	while read -sr pyPkgName pyPkyVersion; do
		displayTask "$pyPkgName"
		# local pypi_latest="$(curl -sS https://pypi.org/simple/${pyPkgName}/ | grep -o '>.*</' | tail -n 1 | grep -o -E '[0-9]([0-9]|[-._])*[0-9]')" # No-sed-version
		# local pypi_latest="$(curl -m 10 -Ss https://pypi.org/simple/${pyPkgName}/ | sed -Ee 's@[^>]+>([^<]+)</.+@\1@' -e '/[-.]dev[0-9]*[-.]|[<>]/d' -e 's/.+[-_]([0-9]([0-9]|[-._])*[0-9]).+/\1/' -e '/\./!d' | tail -n 1)"
#		local pypi_latest="$(curl -m 10 -Ss https://pypi.org/simple/${pyPkgName}/ | sed -Ene '/<\/a>/{ s@</a.+@@; s@.+>@@; } -e '/[-.]dev[0-9]*[-.]|[<>]/d' -e 's/.+[-_]([0-9]([0-9]|[-._])*[0-9]).+/\1/' -e '/\./!d' | tail -n 1)"
#		local pypi_latest="$(curl -m 10 -Ss https://pypi.org/simple/${pyPkgName}/ | sed -Ene '/<\/a>/{ s@.+>([^<]+)<.+@\1@; }' -e '/[-.]dev[0-9]*[-.]|[<>]/d' -e 's/.+[-_]([0-9]([0-9]|[-._])*[0-9]).+/\1/' -e '/\./!d' | tail -n 1)"
#		local pypi_latest="$(curl -m 10 -Ss https://pypi.org/simple/${pyPkgName}/ | sed -Ene '/<\/a>/{ s@.+>([^<]+)<.+@\1@; /[-.]dev[0-9]*[-.]|[<>]/!{ s/.+[-_]([0-9]([0-9]|[-._])*[0-9]).+/\1/; /\./p; }; }' | tail -n 1)"
		local pypi_latest="$(_checkPkg "$pyPkgName")"

		if [ "$pyPkyVersion" != "$pypi_latest" ]; then
			[ ! -v hasOutdated ] && printf "An update is available for the following package(s):\n" && hasOutdated=0
			clearLine
			printf "%s\tCurrent: %s\tLatest: %s\n" "$pyPkgName" "$pyPkyVersion" "$pypi_latest"  # | column -o '\t' -s '\t'
		fi
	# done < <( pipx list | grep -o 'package.*,' | tr -d ',' | cut -d ' ' -f 2- ) # No-sed-version
#	done < <( pipx list | sed -E '{ /package.*,/!d ; s/\s*package\s*([^ ]+)\s*([0-9.]+),.+/\1 \2/ ;}' ) # | column -o '\t' -s '\t'
#	done < <( pipx list | sed -En '/package.*,/ { s/\s*package\s*([^ ]+)\s*([0-9.]+),.+/\1 \2/ ; p ;}' ) # | column -o '\t' -s '\t'
#	done < <( pipx list | sed -En '/package.*,/ { s/\s*package\s*([^,]+),.+/\1/ ; p ;}' ) # | column -o '\t' -s '\t'
	done < <( pipx list | awk '/package.*,/ { sub(",", "", $3); print $2" "$3; }' ) # | column -o '\t' -s '\t'

	if [ "${hasOutdated:-1}" -eq 1 ]; then
		printf "All top-level packages are currently up to date.\n"
	else
		printf "\n\n"
	fi
}

_pipx_outdated
